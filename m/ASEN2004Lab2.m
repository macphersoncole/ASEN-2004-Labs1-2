%% Housekeeping
clear;
close all;
clc;

%% Initial Conditions
%This Code uses the EPPLER 68 AIRFOIL (e68-il)

%constants
inToM = 0.0254; %inches to meters conversion
g = 9.81;%m/s^2
rho = 1.0581;%kg/m^3 density of air at 1.5km
h0 = 7;%m intial height of flight
mu = 1.74e-5;%kg/(m*s) viscosity at 1.5km

%
b = 1; %m wingspan
ct = 3*inToM; %m tip chord
cr = ct/0.4; %m root chord
cbar = (ct+cr)/2; %m average chord
S = b*cbar; %m^2 planform area
AR = (b^2)/S; %aspect ratio
rFuse = 2*inToM;%m radius of cylinder of fuselage
wingL = (1-rFuse)/2;%m length of a single wing
fuseL = 1;%m length of design
toverc = .131;%thickness to chord ratio -- different for every airfoil

%tail
% tailL = 0.1; %m length of single tail section
% tailCt = 3*inToM;%m tail tip chord
% tailCr = ct/0.4;%m tail root chord
% tailCbar = (tailCr+tailCt)/2;%m tail average chord

%horizontal tail
htailAR = 3;%aspect ratio for tail
htailb = 0.4;%m tail wingspan
htailS = (htailb^2)/AR;%m^2 planform area of tail
htailc = htailS/htailb;%m chord of tail
htailwingL = (1/2)*(htailb-(2*rFuse));%m length of one wing in horizontal tail
htailSwet = 2*2*(htailwingL*htailc);%m^2 wetted area for tail
htailThick = 1*inToM;

%vertical tail
vtailh = htailwingL;%m height of vertical tail
vtailc = htailc;
vtailSwet = 2*(htailwingL*htailc);
vtailThick = 1*inToM;

%nose
noseL = 0.1;%m length of cone nose
noseDiag = sqrt((noseL^2)+(rFuse^2));%m diagonal for a cone nose

%camera
camH = 72e-3; %m height of camera
camL = 58e-3; %m length of camera

s = 1-(2*(((2*rFuse)/b)^2));%some constant or something

%assumptions
e = 0.9;

L = fuseL+noseL;
wingStartx = 0.3;%m location of start of wing, measured from start of cylinder

%% Read in Airfoil Data
data2D = xlsread("xf-e68-il-100000.csv");
data2D = data2D(9:end,:);
alpha2D = data2D(:,1);
Cl = data2D(:,2);
Cd = data2D(:,3);

%% 2D Figures
figNum = 1;
% figure(figNum)
% hold on
% plot(alpha2D,Cl);
% xlabel("Angle of Attack (deg)");
% ylabel("Coeffecient of Lift");
% title("2D Cl vs alpha");
% hold off
% figNum = figNum+1;
% 
% figure(figNum)
% hold on
% plot(Cl,Cd);
% ylabel("Coeffecient of Drag");
% xlabel("Coeffecient of Lift");
% title("2D Cl vs Cd");
% hold off
%figNum = figNum+1;

%% Calculations
%slope of 2D Cl vs alpha plot
a0vec = zeros(67-12,1);
%below indecies are chosen by eye, not in code
for i = 12:67 
    %finds slope a0 of 2D Cl vs alpha plot
    a0vec(i-11) = (Cl(i+1)-Cl(i))/(alpha2D(i+1)-alpha2D(i));
end
a0 = mean(a0vec);
%a0 = (Cl(67)-Cl(12))/(alpha2D(67)-alpha2D(12));

%slope of 3D CL vs alpha plot (assuming all lift is generated by the wing)
a = a0/(1+((57.3*a0)/(pi*e*AR)));

%% Coeffecient of Lift Calculations
%angle of attack at zero lift
%calculated outside of code through interpolation
%will be different for different gliders
alphaL0 = -1.350174216; %deg
CL = a.*(alpha2D-alphaL0);
usefulCL = CL(12:67);

%% 3D Wing CD
k2D = 1/(pi*e*AR);
CDwing = Cd + k2D.*(CL.^2);

%% 3D Wing Figure
% figure(figNum)
% hold on
% plot(CL,CDwing);
% ylabel("Coeffecient of Drag");
% xlabel("Coeffecient of Lift");
% title("3D Wing CD vs CL");
% hold off
% figNum = figNum+1;

%% Wetted Area -- this varies widely depending on your design!!

%Wetted Area -- equations specific to Scott's glider
Swings = 2*(wingL*cbar)*(1+(0.25*toverc));
Sfuse = 2*pi*rFuse*fuseL + pi*(rFuse^2);
Stail = htailSwet+vtailSwet;
Snose = pi*rFuse*noseDiag;
Swet = Swings+Sfuse+Stail+Snose;

%Cfe = 0.003; %assumption from lab doc 1 for Cfe of sailplane
targetV = 12.5; %m/s target velocity
ReGlider = (rho*targetV*L)/(mu);
Cfe = 0.074/(ReGlider^0.2);

%% CDmin and CLminD
CDmin = Cfe*(Swet/S);

CDWingMinIndex = find(CDwing==(min(CDwing)));
alphaMinD = alpha2D(CDWingMinIndex);

CLMinD = a*(alphaMinD-alphaL0);

%% CD0 and e0
CD0 = ((pi*AR*CDmin)+((1/(0.99*s))*(CLMinD.^2)))./((pi*AR)-(0.38.*pi.*AR.*(CLMinD).^2));
e0 = 1./(((1/(0.99*s))+(0.38.*CD0.*pi.*AR)));
k1 = 1/(pi*e0*AR);
k2 = -2*k1*CLMinD;
CD = (CD0+(k1.*(CL.^2))+(k2.*CL));

%% CLreq
%from CD0 = kCL^2 because we are shooting for max range
CLreq = sqrt(CD0/k1);

%% L/D
LoverD = CL./CD;

%% Weight Estimation
%constants
densWood = 160; %kg/m^3 density of balsa wood
densFoam = 26; %kg/m^3 density of foam
mCam = 0.16; %kg mass of camera

%volume calculation
Vfuse = pi*(rFuse^2)*fuseL;%volume of fuselage cylinder
Vnose = (1/3)*pi*(rFuse^2)*noseL;%m^3 colume of nose cone
%Vtail = 3*tailL*tailCbar*(toverc*tailCr);%m^3 volume of tail assuming rectangular prism
Vhtail = (1/2)*(htailSwet*htailThick);%m^3 volume of tail assuming flat plate
Vvtail = (1/2)*(vtailSwet*vtailThick);%m^3 volume of tail assuming flat plate
Vwing = 2*(toverc*cr)*cbar*wingL;%m^3 volume of wings assuming rectangular prism
V = Vfuse+Vnose+Vhtail+Vvtail+Vwing;%m^3 total volume

%mass calculation
mFuse = Vfuse*densFoam; %kg total mass
mNose = Vnose*densFoam;
mhtail = Vhtail*densFoam;
mvtail = Vvtail*densFoam;
mWing = Vwing*densFoam;

mass = mFuse+mNose+mhtail+mvtail+mWing+mCam;
%weight calculation
wFuse = g*mFuse;
wNose = g*mNose;
whtail = g*mhtail;
wvtail = g*mvtail;
wWing = g*mWing;
wCam = g*mCam;

W = wFuse+wNose+whtail+wvtail+wWing+wCam; %N total weight

%% Center of Gravity
xcgCyl = (0.5*fuseL)-wingStartx;
xcgNose = -wingStartx-(0.25*noseL);
xcgWing = 0.5*((0.4*cr)+(0.4*ct));
xcghtail = (fuseL-wingStartx)-(0.5*htailc);
xcgvtail = (fuseL-wingStartx)-(0.5*vtailc);

%xcgPlane = ((wFuse*xcgCyl)+(wNose*xcgNose)+(whtail*xcghtail)+(wvtail*xcgvtail)+(wWing*xcgWing))/(W);
xcgGoal = 0.25*cr;
%xcgCam = ((xcgGoal*W)-(WPlane*xcgPlane))/(wCam);
xcgCam = -wingStartx+(0.5*camL);
xcgNoBal = ((wFuse*xcgCyl)+(wNose*xcgNose)+(whtail*xcghtail)+(wvtail*xcgvtail)+(wWing*xcgWing)+(xcgCam*wCam))/(W);

xcgBal = -wingStartx;
%wBal = ((xcgGoal*W)-(W*xcgNoBal))/(xcgBal-xcgGoal);
wBal = 2;
W = W+wBal;
xcgBal = ((xcgGoal*W)-(W*xcgNoBal))/wBal;

xcg = ((wFuse*xcgCyl)+(wNose*xcgNose)+(whtail*xcghtail)+(wvtail*xcgvtail)+(wWing*xcgWing)+(xcgCam*wCam)+(xcgBal*wBal))/(W);

%xcgVec = [xcgCyl xcgNose xcgWing xcghtail xcgvtail xcgPlane xcgGoal xcgCam];


% figure(figNum)
% hold on
% scatter(
% xlabel("Angle of Attack (deg)");
% ylabel("Coeffecient of Lift");
% title("Whole Aircraft AoA vs CL");
% legend("Whole Aircraft","2D Airfoil");
% hold off
% figNum = figNum+1;

%% vGlide and W/S
wingLoading = W/S;%N/m^2 wing loading
vGlide = sqrt((2*W)/(CLreq*rho*S));

%% Full Aricraft Figures
figure(figNum)
hold on
plot(alpha2D,CL,'LineWidth',2);
plot(alpha2D,Cl,'LineWidth',2);
xlabel("Angle of Attack (deg)");
ylabel("Coeffecient of Lift");
title("Whole Aircraft AoA vs CL");
legend("Whole Aircraft","2D Airfoil");
hold off
figNum = figNum+1;

figure(figNum)
hold on
plot(CL,CD,'LineWidth',2);
plot(CL,CDwing,'LineWidth',2);
plot(Cl,Cd,'LineWidth',2);
ylabel("Coeffecient of Drag");
xlabel("Coeffecient of Lift");
title("Whole Aircraft CD vs CL");
legend("Whole Aircraft","3D Wing","2D Airfoil");
hold off
figNum = figNum+1;

figure(figNum)
hold on
plot(alpha2D,LoverD,'LineWidth',2);
ylabel("L/D");
xlabel("Angle of Attack (deg)");
title("L/D vs AoA");
hold off
figNum = figNum+1;

%% W/S plot
wingLoadVec = 1:100;
vVec = sqrt((2/(CLreq*rho))*(wingLoadVec));

figure(figNum)
hold on
plot(vVec,wingLoadVec,'LineWidth',2);
scatter(vGlide,wingLoading,'o','r','LineWidth',2);
xline(10,'--','LineWidth',2);
xline(15,'--','LineWidth',2);
ylabel("W/S (N/m^2)");
xlabel("Velocity (m/s)");
title("W/S vs V");
legend("Relationship","W/S for this Glider");
hold off
figNum = figNum+1;

%% Outputs
LoverDMax = max(LoverD);
LoverDMaxIndecie = find(LoverD == LoverDMax);
alphaLoverDMax = alpha2D(LoverDMaxIndecie);

R = h0*(LoverDMax);

fprintf("L/D Max: %.3f\n",LoverDMax);
fprintf("AoA at L/D Max: %.3f degrees\n",alphaLoverDMax);
fprintf("W/S: %.3f N/m^2\n",wingLoading);
fprintf("Glide Velocity: %.3f m/s\n",vGlide);
fprintf("Range: %.3f m\n",R);







