%% Housekeeping
clear;
close all;
clc;

%% Initial Conditions
%This Code uses the EPPLER 68 AIRFOIL (e68-il)

%constants
inToM = 0.0254; %inches to meters conversion
g = 9.81;%m/s^2
rho = 1.02138;%kg/m^3 density of air at 1.5km
h_0 = 7;

b = 1; %m wingspan
ct = 4*inToM;
cr = 6*inToM;
cbar = (ct+cr)/2; %m average chord
S = b*cbar; %m^2 planform area
AR = (b^2)/S; %aspect ratio
rFuse = 0.098425/2;%m radius of cylinder of fuselage
wingL = (1-rFuse)/2;%m length of a single wing
LFuse = 0.65;%m length of design
toverc = .134;%thickness to chord ratio -- different for every airfoil

%tail
tailL = 1/4; %m length of single tail section
tailCt = ct/4;%m tail tip chord
tailCr = cr/4;%m tail root chord
tailCbar = (tailCr+tailCt)/2;%m tail average chord

%nose
% S_wet_noseCone = pi * (rFuse)^2;
% noseL = rFuse;%m length of cone nose
% noseDiag = sqrt((noseL^2)+(rFuse^2));%m diagonal for a cone nose

s = 1-(2*(((2*rFuse)/b)^2));%some constant or something

%assumptions
e = 0.9;

%% Read in Airfoil Data
data2D = xlsread("FINALgoe430.csv");
data2D = data2D(9:end,1:3);
alpha2D = data2D(:,1);
Cl = data2D(:,2);
Cd = data2D(:,3);

%% 2D Figures
% figure(1)
% hold on
% plot(alpha2D,Cl);
% xlabel("Angle of Attack (deg)");
% ylabel("Coeffecient of Lift");
% title("2D Cl vs alpha");
% hold off
% 
% figure(2)
% hold on
% plot(Cl,Cd);
% ylabel("Coeffecient of Drag");
% xlabel("Coeffecient of Lift");
% title("2D Cl vs Cd");
% hold off
% 72 mm by 52
%% Calculations
%slope of 2D Cl vs alpha plot
a0vec = zeros(66-17,1);
%below indecies are chosen by eye, not in code
for i = 17:66
    %finds slope a0 of 2D Cl vs alpha plot
    a0vec(i-16) = (Cl(i+1)-Cl(i))/(alpha2D(i+1)-alpha2D(i));
end
a0 = mean(a0vec);
%a0 = (Cl(67)-Cl(12))/(alpha2D(67)-alpha2D(12));

%slope of 3D CL vs alpha plot (assuming all lift is generated by the wing)
a = a0/(1+((57.3*a0)/(pi*e*AR)));

%% Coeffecient of Lift Calculations
%angle of attack at zero lift
%calculated outside of code through interpolation
%will be different for different gliders
alphaL0 = -4.081; %deg
CL = a.*(alpha2D-alphaL0);
usefulCL = CL(17:66);

%% 3D Wing CD
k2D = 1/(pi*e*AR);
CDwing = Cd + k2D.*(CL.^2);

%% 3D Wing Figure
% figure(3)
% hold on
% plot(CL,CDwing);
% ylabel("Coeffecient of Drag");
% xlabel("Coeffecient of Lift");
% title("3D Wing CD vs CL");
% hold off

%% Wetted Area -- this varies widely depending on your design!!
Viscosity = 0.0000181330;
Re = (rho*12.5*LFuse)/Viscosity;
Cfe = 0.074/(Re^0.2); %assumption from lab doc 1 for Cfe of sailplane

t_c = .134;
tau = 1;
%Wetted Area -- equations specific to Scott's glider
lambda = ct/cr;
triBase = (b/2)-(rFuse);
triHeight = cr-ct;
S_exp_wing = 2*((0.5*triBase*triHeight)+(triBase*ct));
S_wet_wing = 2*S_exp_wing*( 1 + (0.25 * t_c * ((1+(tau*lambda))/(1+lambda)) ) );

b_rear = b/4;
ct_rear = b_rear/3;
cr_rear = ct_rear;
c_rear = b_rear/3;
t_c_rear = .135;
lambda_rear = cr_rear/ct_rear;
triBase_rear = b_rear/2;
triHeight_rear = cr_rear - ct_rear;
S_exp_rear = 2*((0.5*triBase_rear*triHeight_rear)+(triBase_rear*ct_rear));
S_wet_rear = 2*S_exp_rear*( 1 + (0.25 * t_c_rear * ((1+(tau*lambda_rear))/(1+lambda_rear)) ) );
S_rear = b_rear*c_rear;
AR_rear = (b_rear^2)/S_rear;

height_vertTail = rFuse*3;
length_vertTail = c_rear;
width_vertTail = .135*c_rear;
S_exp_vertTail = 2*(width_vertTail*length_vertTail+height_vertTail*length_vertTail+width_vertTail*height_vertTail);
S_wet_vertTail = 2*S_exp_vertTail*( 1 + (0.25 * t_c_rear * ((1+(tau*lambda_rear))/(1+lambda_rear)) ) );

% Nose Cone (Front)
S_wet_noseCone = 2 * pi * (rFuse)^2;

% Fuselage (Straight portion)
length_fuselage = (LFuse - rFuse) * 0.8;
S_wet_fuselage = 2*pi*(rFuse)*length_fuselage;

% Trailing cone (Back)
length_cone = LFuse - rFuse - length_fuselage;
S_wet_cone = pi*(rFuse)*sqrt((length_cone)^2+(rFuse)^2);

Swet = S_wet_rear + S_wet_wing + S_wet_noseCone + S_wet_fuselage + S_wet_cone + S_wet_vertTail;

%% CDmin and CLminD
CDmin = Cfe*(Swet/S);

CDWingMinIndex = find(CDwing==(min(CDwing)));
alphaMinD = alpha2D(CDWingMinIndex);

CLMinD = a*(alphaMinD-alphaL0);

%% CD0 and e0
CD0 = ((((pi*AR*CDmin)+((1/(0.99*s))*(CLMinD^2)))/((pi*AR)-(0.38*pi*AR*(CLMinD)^2))));
e0 = 1./(((1/(0.99*s))+(0.38*CD0*pi*AR)));
k1 = 1/(pi*e0*AR);
k2 = -2*k1*CLMinD;
CD = (CD0+(k1.*(CL.^2))+(k2.*CL));

%% CLreq
%from CD0 = kCL^2 because we are shooting for max range
CLreq = sqrt(CD0/k1);

%% L/D
LoverD = CL./CD;
L_Dmax = max(LoverD);
R = h_0 * L_Dmax;

%% Weight Estimation
%constants
densWood = 160; %kg/m^3 density of balsa wood
densFoam = 26; %kg/m^3 density of foam
densFiberGlass = 1522.39476; %kg/m^3 
mCam = 0.16; %kg mass of camera
mBallast = 0;

%volume calculation
Vfuse = pi*(rFuse^2)*length_fuselage;%volume of fuselage cylinder
Vnose = ((4/3)*pi*(rFuse^3))/2;%m^3 colume of nose cone
Vtail = b_rear*c_rear*(t_c_rear*cr_rear);%m^3 volume of tail assuming rectangular prism
t_fiberGlass = 0.004;
Vwing = (2*(t_c*cr)*cbar*wingL)-(2*(t_c*(cr-t_fiberGlass))*(cbar-t_fiberGlass)*(wingL-t_fiberGlass));%m^3 volume of wings assuming rectangular prism
VtrailingCone = pi*(rFuse^2)*(length_cone/3);
VverticalTail = cr_rear * ((b_rear/4)) * (t_c_rear*cr_rear);

Wfuse = Vfuse*densFoam*g;
Wnose = Vnose*densFoam*g;
Wtail = Vtail*densWood*g;
Wwing = Vwing*densFiberGlass*g;
WtrailingCone = VtrailingCone*densFoam*g;
WverticalTail = VverticalTail*densFoam*g;
wCam = mCam*g;
Wballast = mBallast*g;

xPosofWing = 0.3 * LFuse;

CGfuse = (rFuse + length_fuselage/2) - (xPosofWing); %rFuse + length_fuselage/2;
CGnose = ((3*rFuse)/8) - (xPosofWing);
CGtail = (LFuse - (ct_rear/2)) - (xPosofWing);
CGwing = 0.4*cbar;
CGtrailingCone = (rFuse + length_fuselage + (length_cone/4)) - (xPosofWing);
CGverticalTail = (LFuse - (ct_rear/2)) - (xPosofWing);
CGcam = (rFuse*2.1) - (xPosofWing);
CGballast = 0.0508;

%weight calculation
W = Wfuse + Wnose + Wtail + Wwing + WtrailingCone + WverticalTail + wCam + Wballast; %N total weight
CG_tot = (Wfuse*CGfuse + Wnose*CGnose + Wtail*CGtail + Wwing*CGwing + WtrailingCone*CGtrailingCone + CGverticalTail*WverticalTail + wCam*CGcam + CGballast*Wballast) / W;
CG_PrecentC_tot = (CG_tot) / cbar;
W_S = W/S;



%% vGlide and W/S

vStall = sqrt( (2*W) / (rho*S*1.592) );

wingLoading = W/S;%N/m^2 wing loading
vGlide = sqrt((2*W)/(CLreq*rho*S));

%% v_H
x_AC_tail = ((LFuse - xPosofWing) - c_rear) + (c_rear/4); % x=0 is at the start of wing
v_H = (S_rear * ( x_AC_tail - CG_tot )) / (S*cbar);

%% Stability Calculations
a_t = 1/16; % got from tail airfoil data in lab doc
h_AC_wing = 0.25; % estimated
h_cg = CG_PrecentC_tot;
h_np = (h_AC_wing + ((a_t/a)*v_H*(1-0.3275)));
x_np = (h_np*cbar)+(cr-ct);

sm = (h_AC_wing + ((a_t/a)*v_H*(1-0.3275))) - h_cg;

c_m_alpha = -a*(sm);

%% Trim Calculations

c_m_AC_wing = -0.0155;
i_t = 0;
c_m_cg = c_m_AC_wing + (v_H*a_t*i_t);

alpha_e = 3.75 - alphaL0;
i_t = ((-c_m_AC_wing+(a*alpha_e*((h_cg-h_AC_wing)-((a_t/a)*v_H*(1-0.3275))))) / (v_H*a_t)) + W;
alpha_t = 3.75 - i_t - (0.3275*3.75);

%% Vertical Tail Calculations

v_v = (height_vertTail*length_vertTail*(CGverticalTail-CG_tot)) / S*b;

%% Spiral Stability

Gamma = 10;
B = ((CGverticalTail-CG_tot)*Gamma)/(b*CLreq);

%% Full Aricraft Figures

figure(4)
hold on
plot(alpha2D,CL,'LineWidth',2);
plot(alpha2D,Cl,'LineWidth',2);
xlabel("Angle of Attack (deg)");
ylabel("Coeffecient of Lift");
title("Whole Aircraft AoA vs CL");
legend("Whole Aircraft","2D Airfoil");
hold off

figure(5)
hold on
plot(CL,CD,'LineWidth',2);
%plot(CL,CDwing,'LineWidth',2);
%plot(Cl,Cd,'LineWidth',2);
ylabel("Coeffecient of Drag");
xlabel("Coeffecient of Lift");
title("Whole Aircraft CD vs CL");
legend("Whole Aircraft"); %,"3D Wing","2D Airfoil"
hold off

testLoverD = 18/22;

figure(6)
hold on
plot(alpha2D,LoverD,'LineWidth',2);
yline(testLoverD,'--k',"Test L/D = 0.8182",'LineWidth',2);
ylabel("L/D");
xlabel("Angle of Attack (deg)");
title("L/D vs AoA");
legend("Whole Aircraft","Flight Test");
hold off

%% W/S plot
wingLoadVec = 1:100;
vVec = sqrt((2/(CLreq*rho))*(wingLoadVec));

figure(7)
hold on
plot(vVec,wingLoadVec,'LineWidth',2);
scatter(vGlide,wingLoading,'o','r','LineWidth',2);
xline(10,'--','LineWidth',2);
xline(15,'--','LineWidth',2);
ylabel("W/S (N/m^2)");
xlabel("Velocity (m/s)");
title("W/S vs V");
legend("Relationship","W/S for this Glider");
hold off



